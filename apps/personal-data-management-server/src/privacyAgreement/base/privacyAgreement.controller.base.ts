/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrivacyAgreementService } from "../privacyAgreement.service";
import { PrivacyAgreementCreateInput } from "./PrivacyAgreementCreateInput";
import { PrivacyAgreement } from "./PrivacyAgreement";
import { PrivacyAgreementFindManyArgs } from "./PrivacyAgreementFindManyArgs";
import { PrivacyAgreementWhereUniqueInput } from "./PrivacyAgreementWhereUniqueInput";
import { PrivacyAgreementUpdateInput } from "./PrivacyAgreementUpdateInput";

export class PrivacyAgreementControllerBase {
  constructor(protected readonly service: PrivacyAgreementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PrivacyAgreement })
  async createPrivacyAgreement(
    @common.Body() data: PrivacyAgreementCreateInput
  ): Promise<PrivacyAgreement> {
    return await this.service.createPrivacyAgreement({
      data: {
        ...data,

        company: data.company
          ? {
              connect: data.company,
            }
          : undefined,
      },
      select: {
        company: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PrivacyAgreement] })
  @ApiNestedQuery(PrivacyAgreementFindManyArgs)
  async privacyAgreements(
    @common.Req() request: Request
  ): Promise<PrivacyAgreement[]> {
    const args = plainToClass(PrivacyAgreementFindManyArgs, request.query);
    return this.service.privacyAgreements({
      ...args,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PrivacyAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async privacyAgreement(
    @common.Param() params: PrivacyAgreementWhereUniqueInput
  ): Promise<PrivacyAgreement | null> {
    const result = await this.service.privacyAgreement({
      where: params,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PrivacyAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrivacyAgreement(
    @common.Param() params: PrivacyAgreementWhereUniqueInput,
    @common.Body() data: PrivacyAgreementUpdateInput
  ): Promise<PrivacyAgreement | null> {
    try {
      return await this.service.updatePrivacyAgreement({
        where: params,
        data: {
          ...data,

          company: data.company
            ? {
                connect: data.company,
              }
            : undefined,
        },
        select: {
          company: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PrivacyAgreement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrivacyAgreement(
    @common.Param() params: PrivacyAgreementWhereUniqueInput
  ): Promise<PrivacyAgreement | null> {
    try {
      return await this.service.deletePrivacyAgreement({
        where: params,
        select: {
          company: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
