/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PrivacyAgreement as PrismaPrivacyAgreement,
  Company as PrismaCompany,
} from "@prisma/client";

export class PrivacyAgreementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PrivacyAgreementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.privacyAgreement.count(args);
  }

  async privacyAgreements(
    args: Prisma.PrivacyAgreementFindManyArgs
  ): Promise<PrismaPrivacyAgreement[]> {
    return this.prisma.privacyAgreement.findMany(args);
  }
  async privacyAgreement(
    args: Prisma.PrivacyAgreementFindUniqueArgs
  ): Promise<PrismaPrivacyAgreement | null> {
    return this.prisma.privacyAgreement.findUnique(args);
  }
  async createPrivacyAgreement(
    args: Prisma.PrivacyAgreementCreateArgs
  ): Promise<PrismaPrivacyAgreement> {
    return this.prisma.privacyAgreement.create(args);
  }
  async updatePrivacyAgreement(
    args: Prisma.PrivacyAgreementUpdateArgs
  ): Promise<PrismaPrivacyAgreement> {
    return this.prisma.privacyAgreement.update(args);
  }
  async deletePrivacyAgreement(
    args: Prisma.PrivacyAgreementDeleteArgs
  ): Promise<PrismaPrivacyAgreement> {
    return this.prisma.privacyAgreement.delete(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.privacyAgreement
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
