/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PrivacyAgreement } from "./PrivacyAgreement";
import { PrivacyAgreementCountArgs } from "./PrivacyAgreementCountArgs";
import { PrivacyAgreementFindManyArgs } from "./PrivacyAgreementFindManyArgs";
import { PrivacyAgreementFindUniqueArgs } from "./PrivacyAgreementFindUniqueArgs";
import { CreatePrivacyAgreementArgs } from "./CreatePrivacyAgreementArgs";
import { UpdatePrivacyAgreementArgs } from "./UpdatePrivacyAgreementArgs";
import { DeletePrivacyAgreementArgs } from "./DeletePrivacyAgreementArgs";
import { Company } from "../../company/base/Company";
import { PrivacyAgreementService } from "../privacyAgreement.service";
@graphql.Resolver(() => PrivacyAgreement)
export class PrivacyAgreementResolverBase {
  constructor(protected readonly service: PrivacyAgreementService) {}

  async _privacyAgreementsMeta(
    @graphql.Args() args: PrivacyAgreementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PrivacyAgreement])
  async privacyAgreements(
    @graphql.Args() args: PrivacyAgreementFindManyArgs
  ): Promise<PrivacyAgreement[]> {
    return this.service.privacyAgreements(args);
  }

  @graphql.Query(() => PrivacyAgreement, { nullable: true })
  async privacyAgreement(
    @graphql.Args() args: PrivacyAgreementFindUniqueArgs
  ): Promise<PrivacyAgreement | null> {
    const result = await this.service.privacyAgreement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PrivacyAgreement)
  async createPrivacyAgreement(
    @graphql.Args() args: CreatePrivacyAgreementArgs
  ): Promise<PrivacyAgreement> {
    return await this.service.createPrivacyAgreement({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PrivacyAgreement)
  async updatePrivacyAgreement(
    @graphql.Args() args: UpdatePrivacyAgreementArgs
  ): Promise<PrivacyAgreement | null> {
    try {
      return await this.service.updatePrivacyAgreement({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PrivacyAgreement)
  async deletePrivacyAgreement(
    @graphql.Args() args: DeletePrivacyAgreementArgs
  ): Promise<PrivacyAgreement | null> {
    try {
      return await this.service.deletePrivacyAgreement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(
    @graphql.Parent() parent: PrivacyAgreement
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
