/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Communication } from "../../communication/base/Communication";
import { ValidateNested, IsOptional, IsDate, IsString } from "class-validator";
import { Type } from "class-transformer";
import { DataRequest } from "../../dataRequest/base/DataRequest";
import { DataUpload } from "../../dataUpload/base/DataUpload";
import { PrivacyAgreement } from "../../privacyAgreement/base/PrivacyAgreement";

@ObjectType()
class Company {
  @ApiProperty({
    required: false,
    type: () => [Communication],
  })
  @ValidateNested()
  @Type(() => Communication)
  @IsOptional()
  communications?: Array<Communication>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [DataRequest],
  })
  @ValidateNested()
  @Type(() => DataRequest)
  @IsOptional()
  dataRequests?: Array<DataRequest>;

  @ApiProperty({
    required: false,
    type: () => [DataUpload],
  })
  @ValidateNested()
  @Type(() => DataUpload)
  @IsOptional()
  dataUploads?: Array<DataUpload>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  industry!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  privacyAgreement!: string | null;

  @ApiProperty({
    required: false,
    type: () => [PrivacyAgreement],
  })
  @ValidateNested()
  @Type(() => PrivacyAgreement)
  @IsOptional()
  privacyAgreements?: Array<PrivacyAgreement>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Company as Company };
