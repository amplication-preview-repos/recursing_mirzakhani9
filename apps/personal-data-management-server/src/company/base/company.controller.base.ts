/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompanyService } from "../company.service";
import { CompanyCreateInput } from "./CompanyCreateInput";
import { Company } from "./Company";
import { CompanyFindManyArgs } from "./CompanyFindManyArgs";
import { CompanyWhereUniqueInput } from "./CompanyWhereUniqueInput";
import { CompanyUpdateInput } from "./CompanyUpdateInput";
import { CommunicationFindManyArgs } from "../../communication/base/CommunicationFindManyArgs";
import { Communication } from "../../communication/base/Communication";
import { CommunicationWhereUniqueInput } from "../../communication/base/CommunicationWhereUniqueInput";
import { DataRequestFindManyArgs } from "../../dataRequest/base/DataRequestFindManyArgs";
import { DataRequest } from "../../dataRequest/base/DataRequest";
import { DataRequestWhereUniqueInput } from "../../dataRequest/base/DataRequestWhereUniqueInput";
import { DataUploadFindManyArgs } from "../../dataUpload/base/DataUploadFindManyArgs";
import { DataUpload } from "../../dataUpload/base/DataUpload";
import { DataUploadWhereUniqueInput } from "../../dataUpload/base/DataUploadWhereUniqueInput";
import { PrivacyAgreementFindManyArgs } from "../../privacyAgreement/base/PrivacyAgreementFindManyArgs";
import { PrivacyAgreement } from "../../privacyAgreement/base/PrivacyAgreement";
import { PrivacyAgreementWhereUniqueInput } from "../../privacyAgreement/base/PrivacyAgreementWhereUniqueInput";

export class CompanyControllerBase {
  constructor(protected readonly service: CompanyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Company })
  async createCompany(
    @common.Body() data: CompanyCreateInput
  ): Promise<Company> {
    return await this.service.createCompany({
      data: data,
      select: {
        createdAt: true,
        id: true,
        industry: true,
        name: true,
        privacyAgreement: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Company] })
  @ApiNestedQuery(CompanyFindManyArgs)
  async companies(@common.Req() request: Request): Promise<Company[]> {
    const args = plainToClass(CompanyFindManyArgs, request.query);
    return this.service.companies({
      ...args,
      select: {
        createdAt: true,
        id: true,
        industry: true,
        name: true,
        privacyAgreement: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async company(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    const result = await this.service.company({
      where: params,
      select: {
        createdAt: true,
        id: true,
        industry: true,
        name: true,
        privacyAgreement: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompany(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() data: CompanyUpdateInput
  ): Promise<Company | null> {
    try {
      return await this.service.updateCompany({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          industry: true,
          name: true,
          privacyAgreement: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompany(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    try {
      return await this.service.deleteCompany({
        where: params,
        select: {
          createdAt: true,
          id: true,
          industry: true,
          name: true,
          privacyAgreement: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/communications")
  @ApiNestedQuery(CommunicationFindManyArgs)
  async findCommunications(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Communication[]> {
    const query = plainToClass(CommunicationFindManyArgs, request.query);
    const results = await this.service.findCommunications(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        date: true,
        id: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/communications")
  async connectCommunications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CommunicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communications: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/communications")
  async updateCommunications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CommunicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communications: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/communications")
  async disconnectCommunications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CommunicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communications: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dataRequests")
  @ApiNestedQuery(DataRequestFindManyArgs)
  async findDataRequests(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<DataRequest[]> {
    const query = plainToClass(DataRequestFindManyArgs, request.query);
    const results = await this.service.findDataRequests(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        requestDate: true,
        responseData: true,
        responseDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dataRequests")
  async connectDataRequests(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: DataRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataRequests: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dataRequests")
  async updateDataRequests(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: DataRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataRequests: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dataRequests")
  async disconnectDataRequests(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: DataRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataRequests: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dataUploads")
  @ApiNestedQuery(DataUploadFindManyArgs)
  async findDataUploads(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<DataUpload[]> {
    const query = plainToClass(DataUploadFindManyArgs, request.query);
    const results = await this.service.findDataUploads(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataContent: true,
        dataType: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
        userId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dataUploads")
  async connectDataUploads(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: DataUploadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataUploads: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dataUploads")
  async updateDataUploads(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: DataUploadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataUploads: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dataUploads")
  async disconnectDataUploads(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: DataUploadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataUploads: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/privacyAgreements")
  @ApiNestedQuery(PrivacyAgreementFindManyArgs)
  async findPrivacyAgreements(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<PrivacyAgreement[]> {
    const query = plainToClass(PrivacyAgreementFindManyArgs, request.query);
    const results = await this.service.findPrivacyAgreements(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/privacyAgreements")
  async connectPrivacyAgreements(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: PrivacyAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      privacyAgreements: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/privacyAgreements")
  async updatePrivacyAgreements(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: PrivacyAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      privacyAgreements: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/privacyAgreements")
  async disconnectPrivacyAgreements(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: PrivacyAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      privacyAgreements: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }
}
