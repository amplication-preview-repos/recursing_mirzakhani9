/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataUpload } from "./DataUpload";
import { DataUploadCountArgs } from "./DataUploadCountArgs";
import { DataUploadFindManyArgs } from "./DataUploadFindManyArgs";
import { DataUploadFindUniqueArgs } from "./DataUploadFindUniqueArgs";
import { CreateDataUploadArgs } from "./CreateDataUploadArgs";
import { UpdateDataUploadArgs } from "./UpdateDataUploadArgs";
import { DeleteDataUploadArgs } from "./DeleteDataUploadArgs";
import { Company } from "../../company/base/Company";
import { DataUploadService } from "../dataUpload.service";
@graphql.Resolver(() => DataUpload)
export class DataUploadResolverBase {
  constructor(protected readonly service: DataUploadService) {}

  async _dataUploadsMeta(
    @graphql.Args() args: DataUploadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataUpload])
  async dataUploads(
    @graphql.Args() args: DataUploadFindManyArgs
  ): Promise<DataUpload[]> {
    return this.service.dataUploads(args);
  }

  @graphql.Query(() => DataUpload, { nullable: true })
  async dataUpload(
    @graphql.Args() args: DataUploadFindUniqueArgs
  ): Promise<DataUpload | null> {
    const result = await this.service.dataUpload(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataUpload)
  async createDataUpload(
    @graphql.Args() args: CreateDataUploadArgs
  ): Promise<DataUpload> {
    return await this.service.createDataUpload({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DataUpload)
  async updateDataUpload(
    @graphql.Args() args: UpdateDataUploadArgs
  ): Promise<DataUpload | null> {
    try {
      return await this.service.updateDataUpload({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataUpload)
  async deleteDataUpload(
    @graphql.Args() args: DeleteDataUploadArgs
  ): Promise<DataUpload | null> {
    try {
      return await this.service.deleteDataUpload(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(
    @graphql.Parent() parent: DataUpload
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
