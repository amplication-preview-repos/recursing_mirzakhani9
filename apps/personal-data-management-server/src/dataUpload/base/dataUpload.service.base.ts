/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DataUpload as PrismaDataUpload,
  Company as PrismaCompany,
} from "@prisma/client";

export class DataUploadServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataUploadCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataUpload.count(args);
  }

  async dataUploads(
    args: Prisma.DataUploadFindManyArgs
  ): Promise<PrismaDataUpload[]> {
    return this.prisma.dataUpload.findMany(args);
  }
  async dataUpload(
    args: Prisma.DataUploadFindUniqueArgs
  ): Promise<PrismaDataUpload | null> {
    return this.prisma.dataUpload.findUnique(args);
  }
  async createDataUpload(
    args: Prisma.DataUploadCreateArgs
  ): Promise<PrismaDataUpload> {
    return this.prisma.dataUpload.create(args);
  }
  async updateDataUpload(
    args: Prisma.DataUploadUpdateArgs
  ): Promise<PrismaDataUpload> {
    return this.prisma.dataUpload.update(args);
  }
  async deleteDataUpload(
    args: Prisma.DataUploadDeleteArgs
  ): Promise<PrismaDataUpload> {
    return this.prisma.dataUpload.delete(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.dataUpload
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
