/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataUploadService } from "../dataUpload.service";
import { DataUploadCreateInput } from "./DataUploadCreateInput";
import { DataUpload } from "./DataUpload";
import { DataUploadFindManyArgs } from "./DataUploadFindManyArgs";
import { DataUploadWhereUniqueInput } from "./DataUploadWhereUniqueInput";
import { DataUploadUpdateInput } from "./DataUploadUpdateInput";

export class DataUploadControllerBase {
  constructor(protected readonly service: DataUploadService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataUpload })
  async createDataUpload(
    @common.Body() data: DataUploadCreateInput
  ): Promise<DataUpload> {
    return await this.service.createDataUpload({
      data: {
        ...data,

        company: data.company
          ? {
              connect: data.company,
            }
          : undefined,
      },
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataContent: true,
        dataType: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataUpload] })
  @ApiNestedQuery(DataUploadFindManyArgs)
  async dataUploads(@common.Req() request: Request): Promise<DataUpload[]> {
    const args = plainToClass(DataUploadFindManyArgs, request.query);
    return this.service.dataUploads({
      ...args,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataContent: true,
        dataType: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataUpload })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataUpload(
    @common.Param() params: DataUploadWhereUniqueInput
  ): Promise<DataUpload | null> {
    const result = await this.service.dataUpload({
      where: params,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataContent: true,
        dataType: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataUpload })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataUpload(
    @common.Param() params: DataUploadWhereUniqueInput,
    @common.Body() data: DataUploadUpdateInput
  ): Promise<DataUpload | null> {
    try {
      return await this.service.updateDataUpload({
        where: params,
        data: {
          ...data,

          company: data.company
            ? {
                connect: data.company,
              }
            : undefined,
        },
        select: {
          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dataContent: true,
          dataType: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataUpload })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataUpload(
    @common.Param() params: DataUploadWhereUniqueInput
  ): Promise<DataUpload | null> {
    try {
      return await this.service.deleteDataUpload({
        where: params,
        select: {
          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dataContent: true,
          dataType: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
