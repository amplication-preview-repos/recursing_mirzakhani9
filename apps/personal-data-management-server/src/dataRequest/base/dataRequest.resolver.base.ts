/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataRequest } from "./DataRequest";
import { DataRequestCountArgs } from "./DataRequestCountArgs";
import { DataRequestFindManyArgs } from "./DataRequestFindManyArgs";
import { DataRequestFindUniqueArgs } from "./DataRequestFindUniqueArgs";
import { CreateDataRequestArgs } from "./CreateDataRequestArgs";
import { UpdateDataRequestArgs } from "./UpdateDataRequestArgs";
import { DeleteDataRequestArgs } from "./DeleteDataRequestArgs";
import { Company } from "../../company/base/Company";
import { User } from "../../user/base/User";
import { DataRequestService } from "../dataRequest.service";
@graphql.Resolver(() => DataRequest)
export class DataRequestResolverBase {
  constructor(protected readonly service: DataRequestService) {}

  async _dataRequestsMeta(
    @graphql.Args() args: DataRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataRequest])
  async dataRequests(
    @graphql.Args() args: DataRequestFindManyArgs
  ): Promise<DataRequest[]> {
    return this.service.dataRequests(args);
  }

  @graphql.Query(() => DataRequest, { nullable: true })
  async dataRequest(
    @graphql.Args() args: DataRequestFindUniqueArgs
  ): Promise<DataRequest | null> {
    const result = await this.service.dataRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataRequest)
  async createDataRequest(
    @graphql.Args() args: CreateDataRequestArgs
  ): Promise<DataRequest> {
    return await this.service.createDataRequest({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DataRequest)
  async updateDataRequest(
    @graphql.Args() args: UpdateDataRequestArgs
  ): Promise<DataRequest | null> {
    try {
      return await this.service.updateDataRequest({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataRequest)
  async deleteDataRequest(
    @graphql.Args() args: DeleteDataRequestArgs
  ): Promise<DataRequest | null> {
    try {
      return await this.service.deleteDataRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(
    @graphql.Parent() parent: DataRequest
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: DataRequest): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
