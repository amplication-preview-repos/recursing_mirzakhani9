/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataRequestService } from "../dataRequest.service";
import { DataRequestCreateInput } from "./DataRequestCreateInput";
import { DataRequest } from "./DataRequest";
import { DataRequestFindManyArgs } from "./DataRequestFindManyArgs";
import { DataRequestWhereUniqueInput } from "./DataRequestWhereUniqueInput";
import { DataRequestUpdateInput } from "./DataRequestUpdateInput";

export class DataRequestControllerBase {
  constructor(protected readonly service: DataRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataRequest })
  async createDataRequest(
    @common.Body() data: DataRequestCreateInput
  ): Promise<DataRequest> {
    return await this.service.createDataRequest({
      data: {
        ...data,

        company: data.company
          ? {
              connect: data.company,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        requestDate: true,
        responseData: true,
        responseDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataRequest] })
  @ApiNestedQuery(DataRequestFindManyArgs)
  async dataRequests(@common.Req() request: Request): Promise<DataRequest[]> {
    const args = plainToClass(DataRequestFindManyArgs, request.query);
    return this.service.dataRequests({
      ...args,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        requestDate: true,
        responseData: true,
        responseDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataRequest(
    @common.Param() params: DataRequestWhereUniqueInput
  ): Promise<DataRequest | null> {
    const result = await this.service.dataRequest({
      where: params,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        requestDate: true,
        responseData: true,
        responseDate: true,
        status: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataRequest(
    @common.Param() params: DataRequestWhereUniqueInput,
    @common.Body() data: DataRequestUpdateInput
  ): Promise<DataRequest | null> {
    try {
      return await this.service.updateDataRequest({
        where: params,
        data: {
          ...data,

          company: data.company
            ? {
                connect: data.company,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          requestDate: true,
          responseData: true,
          responseDate: true,
          status: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataRequest(
    @common.Param() params: DataRequestWhereUniqueInput
  ): Promise<DataRequest | null> {
    try {
      return await this.service.deleteDataRequest({
        where: params,
        select: {
          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          requestDate: true,
          responseData: true,
          responseDate: true,
          status: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
