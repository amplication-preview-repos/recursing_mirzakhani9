/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DataRequest as PrismaDataRequest,
  Company as PrismaCompany,
  User as PrismaUser,
} from "@prisma/client";

export class DataRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataRequest.count(args);
  }

  async dataRequests(
    args: Prisma.DataRequestFindManyArgs
  ): Promise<PrismaDataRequest[]> {
    return this.prisma.dataRequest.findMany(args);
  }
  async dataRequest(
    args: Prisma.DataRequestFindUniqueArgs
  ): Promise<PrismaDataRequest | null> {
    return this.prisma.dataRequest.findUnique(args);
  }
  async createDataRequest(
    args: Prisma.DataRequestCreateArgs
  ): Promise<PrismaDataRequest> {
    return this.prisma.dataRequest.create(args);
  }
  async updateDataRequest(
    args: Prisma.DataRequestUpdateArgs
  ): Promise<PrismaDataRequest> {
    return this.prisma.dataRequest.update(args);
  }
  async deleteDataRequest(
    args: Prisma.DataRequestDeleteArgs
  ): Promise<PrismaDataRequest> {
    return this.prisma.dataRequest.delete(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.dataRequest
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.dataRequest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
